.grid {
  margin-left: auto;
  margin-right: auto;
  padding: 0 $gutter;

  &::after {
    clear: both;
    content: '';
    display: block;
  }

  @include media($large-screen) {
    padding: 0;
  }

  // Keep .content backwards compatible
  //TODO probably delete this rule once all the repos adopt the new grid
  .content & {
    padding: 0;
  }

  // grid columns
  @for $i from 1 through 12 {
    .grid-width-#{$i} {
      @include span-columns(12);
      @include omega;

      @include media($medium-screen) {
        @include span-columns($i);
      }
    }
  }
}

.col,
.row {
  position: relative;
}

.row {
  flex-wrap: wrap;

  // hack for react containing div requirement
  // targets unclassed divs
  > div:not([class]) {
    align-items: center;
    display: flex;
    flex: 1 0 0;
  }

  &.row-start {
    > div:not([class]) {
      align-items: flex-start;
    }
  }

  &.row-end {
    > div:not([class]) {
      align-items: flex-end;
    }
  }

  &.tree-level-one {
    border-color: $color-textblack;
    width: 100%;
  }

  &.tree-level-two {
    margin-left: $grid-4;
    width: 100%;

    .panel-row:last-child {
      border-bottom: none;
    }
  }
}

.col-flex-1 {
  flex: 1 0 0;
}

.col-flex-2 {
  flex: 2 0 0;
}

.col-flex-none {
  flex: none;
}

$gutter: $grid-4;
$gutter-offset: $grid-2; // $gutter / 2

.col-gutters {
  margin-bottom: -$gutter-offset;
  margin-top: -$gutter-offset;

  & > .row {
    padding-bottom: $gutter-offset;
    padding-top: $gutter-offset;
  }
}

.row-gutters {
  margin-left: -$gutter-offset;
  margin-right: -$gutter-offset;

  & > .col {
    padding-left: $gutter-offset;
    padding-right: $gutter-offset;
  }
}
